RunMany is a pet project about making it easy to practice multiple programming languages at once by putting them in a single file.

Right now the python package is built but there is no IDE support, namely no VSC syntax highlighting.

Goals:
- .many file icon in vsc
- VSCode extension for syntax highlighting .many files and most potential contents: https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide
	- This may require semantic highlighting for code lists, but hopefully not: https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide
- LSP client extension and server to do request forwarding to other language services: https://code.visualstudio.com/api/language-extensions/embedded-languages
	- Though the request forwarding passthrough is pretty limited - no diagnostics, no autocomplete even from my tests. Built-in languages services is not really an option though.
- Commands list akin to code-runner.executorMap that gets put in global settings.json (Though how does this combine with provided json?)
- Thin debugger wrapper extension so when VSC user presses F5 in .many file it prompts a debug config that just runs it. No actual debugging.
- In reality, package all the above extensions into one big VSC extension so the user only installs extension and pip installs runmany and they are ready to go.

see how markdown does meta.embedded.block
https://github.com/microsoft/vscode/blob/main/extensions/markdown-basics/package.json
could support highlighting for any files like json and ini too? 

this guy can't get colors to work nicely either without making whole required theme
https://stackoverflow.com/questions/46377151/how-to-customize-the-color-of-custom-syntax-tokens-in-vscode-extension


haskell has nesting block comments too https://github.com/theia-ide/haskell-theia-extension/blob/master/haskell/data/haskell.tmLanguage.json

good jsonc grammar example 
https://github.com/microsoft/vscode/blob/main/extensions/json/syntaxes/JSONC.tmLanguage.json


make sure custom colors work when no

my own resource for default colors
https://gist.github.com/discretegames/a4d2ccd19f0d62485e53345a56e6ba60

check contrast ratios - https://webaim.org/resources/contrastchecker/

TODO mable simplify comment names since they will end in settings
i.e. remove "punctuation.definition.comment.many.comments" nonsense

bracket color options in the config json?


More Languages to support: ~20 seems a nice number, see what CodeRunner supports
- Python
- Python 2
- JavaScript
- TypeScript
- Java
- Kotlin
- R
- Go
- C++
- C
- C#
- Haskell
- Ruby
- Rust
- Scala
- PHP?
- Swift?
- Perl?

"code-runner.executorMap": {
	"javascript": "node",
	"java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
	"c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
	"cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
	"objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
	"php": "php",
	"python": "python -u",
	"perl": "perl",
	"perl6": "perl6",
	"ruby": "ruby",
	"go": "go run",
	"lua": "lua",
	"groovy": "groovy",
	"powershell": "powershell -ExecutionPolicy ByPass -File",
	"bat": "cmd /c",
	"shellscript": "bash",
	"fsharp": "fsi",
	"csharp": "scriptcs",
	"vbscript": "cscript //Nologo",
	"typescript": "ts-node",
	"coffeescript": "coffee",
	"scala": "scala",
	"swift": "swift",
	"julia": "julia",
	"crystal": "crystal",
	"ocaml": "ocaml",
	"r": "Rscript",
	"applescript": "osascript",
	"clojure": "lein exec",
	"haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
	"rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
	"racket": "racket",
	"scheme": "csi -script",
	"ahk": "autohotkey",
	"autoit": "autoit3",
	"dart": "dart",
	"pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
	"d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
	"haskell": "runhaskell",
	"nim": "nim compile --verbosity:0 --hints:off --run",
	"lisp": "sbcl --script",
	"kit": "kitc --run",
	"v": "v run",
	"sass": "sass --style expanded",
	"scss": "scss --style expanded",
	"less": "cd $dir && lessc $fileName $fileNameWithoutExt.css",
	"FortranFreeForm": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
	"fortran-modern": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
	"fortran_fixed-form": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
	"fortran": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt"
}


10*Python: syntax to run in python 10 times then have average time shown?


todo maybe rethink grammar naming conventions but the things other langs have are so weird

I'm kinda wondering if a non-overwriting color theme would work after all

Colors todo:
	argv string
	stdin string
	language name
	comma?
	colon?
	keywords
	exit
	comments
	disabled


disabled match exact?


invalid header

1, 2, or 3 spaces followed by nonspace, but not totally empty
or 
0 spaces followed by invalid header


part 2

!also:
!also
foo


^(?!!?(?:Also|Stdin(\\s+for)?|Argv(\\s+for)?  )

^[^ ](?!!?)




match anything that doesn't start with space and doesn't contain a colon, but not blank lines

hang on, disabled section while has trouble seeing through comments like in
!Python:
Also 	:
% umm
junk
Also:
    print(7)

share language list


https://raw.githubusercontent.com/microsoft/vscode/main/extensions/python/syntaxes/MagicPython.tmLanguage.json
how does python do indenting?? can't tell

since I need to allow comments and block comments in argv/stdin.code sections I need tot totally rethink

Grammar:

program -> ugh


while: not !?Argv nor !?Stdin nor code section

realizing block comments are simply not possible?

"while": "^(?=\\s*$| {4}|\t|%|/%)",

"begin": "^Argv\\s*(?:\\sfor(?=\\s|:)(?:([^,:]*),)*([^,:]*))?:\\s*(.*$\\n?)",

don't forget about json at the top

follow naming conventions and other stuff at https://macromates.com/manual/en/language_grammars

use word boundaries more \b


Maybe I should do semantic highlighting for just comments -- yeah, block comments even?
Maybe not block comments since then while will still have issues, but at least inline comments in json
or other languages could be highlighted semantically - yeah! should work

spacetab should really count as an indent, maybe capture them specially

having problems with C and nothing else now

C:
	#include <stdio.h>

	int main(int argc, char *argv[]) {
		printf("%s\n", argv[1]);
		return 0;
	}

bottom 3 lines go red - it's like source.c doesn't want to consume them

TODO
- clean up this notes file
- add even more languages (Clojure, swift, ruby, from https://github.com/microsoft/vscode/blob/main/extensions/markdown-basics/syntaxes/markdown.tmLanguage.json, from CodeRunner)


         "meta.embedded.block.html": "html",
          "source.js": "javascript",
          "source.css": "css",
          "meta.embedded.block.frontmatter": "yaml",
          "meta.embedded.block.css": "css",
          "meta.embedded.block.ini": "ini",
          "meta.embedded.block.java": "java",
          "meta.embedded.block.lua": "lua",
          "meta.embedded.block.makefile": "makefile",
          "meta.embedded.block.perl": "perl",
          "meta.embedded.block.r": "r",
          "meta.embedded.block.ruby": "ruby",
          "meta.embedded.block.php": "php",
          "meta.embedded.block.sql": "sql",
          "meta.embedded.block.vs_net": "vs_net",
          "meta.embedded.block.xml": "xml",
          "meta.embedded.block.xsl": "xsl",
          "meta.embedded.block.yaml": "yaml",
          "meta.embedded.block.dosbatch": "dosbatch",
          "meta.embedded.block.clojure": "clojure",
          "meta.embedded.block.coffee": "coffee",
          "meta.embedded.block.c": "c",
          "meta.embedded.block.cpp": "cpp",
          "meta.embedded.block.diff": "diff",
          "meta.embedded.block.dockerfile": "dockerfile",
          "meta.embedded.block.go": "go",
          "meta.embedded.block.groovy": "groovy",
          "meta.embedded.block.pug": "jade",
          "meta.embedded.block.javascript": "javascript",
          "meta.embedded.block.json": "json",
          "meta.embedded.block.less": "less",
          "meta.embedded.block.objc": "objc",
          "meta.embedded.block.scss": "scss",
          "meta.embedded.block.perl6": "perl6",
          "meta.embedded.block.powershell": "powershell",
          "meta.embedded.block.python": "python",
          "meta.embedded.block.rust": "rust",
          "meta.embedded.block.scala": "scala",
          "meta.embedded.block.shellscript": "shellscript",
          "meta.embedded.block.typescript": "typescript",
          "meta.embedded.block.typescriptreact": "typescriptreact",
          "meta.embedded.block.csharp": "csharp",
          "meta.embedded.block.fsharp": "fsharp"