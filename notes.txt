RunMany is a pet project about making it easy to practice multiple programming languages at once by putting them in a single file.

Right now the python package is built but there is no IDE support, namely no VSC syntax highlighting.

Goals:
- .many file icon in vsc
- VSCode extension for syntax highlighting .many files and most potential contents: https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide
	- This may require semantic highlighting for code lists, but hopefully not: https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide
- LSP client extension and server to do request forwarding to other language services: https://code.visualstudio.com/api/language-extensions/embedded-languages
	- Though the request forwarding passthrough is pretty limited - no diagnostics, no autocomplete even from my tests. Built-in languages services is not really an option though.
- Commands list akin to code-runner.executorMap that gets put in global settings.json (Though how does this combine with provided json?)
- Thin debugger wrapper extension so when VSC user presses F5 in .many file it prompts a debug config that just runs it. No actual debugging.
- In reality, package all the above extensions into one big VSC extension so the user only installs extension and pip installs runmany and they are ready to go.

see how markdown does meta.embedded.block
https://github.com/microsoft/vscode/blob/main/extensions/markdown-basics/package.json
could support highlighting for any files like json and ini too? 

this guy can't get colors to work nicely either without making whole required theme
https://stackoverflow.com/questions/46377151/how-to-customize-the-color-of-custom-syntax-tokens-in-vscode-extension

yaml schema worked for a moment kinda then stopped https://github.com/redhat-developer/yaml-language-server#using-inlined-schema

good jsonc grammar example 
https://github.com/microsoft/vscode/blob/main/extensions/json/syntaxes/JSONC.tmLanguage.json


my own resource for default colors
https://gist.github.com/discretegames/a4d2ccd19f0d62485e53345a56e6ba60

check contrast ratios - https://webaim.org/resources/contrastchecker/

TODO mable simplify comment names since they will end in settings
i.e. remove "punctuation.definition.comment.many.comments" nonsense

bracket color options in the config json?


More Languages to support: ~20 seems a nice number, see what CodeRunner supports
- Python
- Python 2
- JavaScript
- TypeScript
- Java
- Kotlin
- R
- Go
- C++
- C
- C#
- Haskell
- Ruby
- Rust
- Scala
- PHP?
- Swift?
- Perl?

"code-runner.executorMap": {
	"javascript": "node",
	"java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
	"c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
	"cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
	"objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
	"php": "php",
	"python": "python -u",
	"perl": "perl",
	"perl6": "perl6",
	"ruby": "ruby",
	"go": "go run",
	"lua": "lua",
	"groovy": "groovy",
	"powershell": "powershell -ExecutionPolicy ByPass -File",
	"bat": "cmd /c",
	"shellscript": "bash",
	"fsharp": "fsi",
	"csharp": "scriptcs",
	"vbscript": "cscript //Nologo",
	"typescript": "ts-node",
	"coffeescript": "coffee",
	"scala": "scala",
	"swift": "swift",
	"julia": "julia",
	"crystal": "crystal",
	"ocaml": "ocaml",
	"r": "Rscript",
	"applescript": "osascript",
	"clojure": "lein exec",
	"haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
	"rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
	"racket": "racket",
	"scheme": "csi -script",
	"ahk": "autohotkey",
	"autoit": "autoit3",
	"dart": "dart",
	"pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
	"d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
	"haskell": "runhaskell",
	"nim": "nim compile --verbosity:0 --hints:off --run",
	"lisp": "sbcl --script",
	"kit": "kitc --run",
	"v": "v run",
	"sass": "sass --style expanded",
	"scss": "scss --style expanded",
	"less": "cd $dir && lessc $fileName $fileNameWithoutExt.css",
	"FortranFreeForm": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
	"fortran-modern": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
	"fortran_fixed-form": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
	"fortran": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt"
}